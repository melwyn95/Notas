{"version":3,"sources":["components/TextView.js","contexts/idbContext.js","actions/doNoteAction.js","components/Spinner.js","contants/noteColors.js","application/noteOperations.js","actions/doFolderAction.js","pages/HomePage/Header/SelectionHeader.js","pages/HomePage/Header/FolderList.js","pages/HomePage/Header/DialogWithTextField.js","pages/HomePage/Header/DeleteFolder.js","pages/HomePage/Header/HomePageHeader.js","pages/HomePage/Header/index.js","workers/search.js","pages/HomePage/SearchBar/index.js","pages/HomePage/NotesContainer/Note.js","pages/HomePage/NotesContainer/NoNotesFallback.js","pages/HomePage/NotesContainer/index.js","pages/HomePage/AddNotes/index.js","pages/HomePage/BottomNotesOperations/index.js","pages/HomePage/index.js","indexedDB/index.js","App.js","serviceWorker.js","index.js","application/utils.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","TextView","_ref","children","style","className","a","createElement","idbContext","createContext","CREATE_NOTE","operation","GET_ALL_NOTES","DELETE_NOTES","MOVE_NOTES","GET_NOTE_BY_ID","CHANGE_NOTE_COLOR","SAVE_NOTE","GET_NOTES_BY_IDS","updateOpenedFolder","Object","_home_melwyns_Desktop_git_repos_Notas_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_melwyns_Desktop_git_repos_Notas_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","db","folderId","setOpenedFolder","tx","foldersStore","folder","wrap","_context","prev","next","transaction","objectStore","get","sent","stop","this","_x","_x2","_x3","apply","arguments","doNoteAction","action","params","idb","openedFolder","changeRoute","timestamp","Date","getTime","then","_ref2","_callee2","notesStore","openedFolderFromDB","_context2","id","count","put","add","color","WHITE","label","content","previewContent","structuredContent","defaultContent","heading","creationTimestamp","lastModifiedTimestamp","abrupt","complete","_x4","_ref3","_callee3","store","index","note","_context3","_x5","setFetching","setNotes","folderNotes","range","IDBKeyRange","only","undefined","openCursor","cursorLoop","cursor","value","continue","push","selection","_ref4","_callee6","notesObjectStore","foldersObjectStore","trashFolder","folderIdNotesMap","_context6","map","noteId","delete","length","Promise","all","_ref5","_callee4","_context4","_x7","keys","_ref6","_callee5","_context5","_x8","_x6","moveToFolderId","_ref7","_callee9","dstFolder","_context9","_ref8","_callee7","_context7","_x10","_ref9","_callee8","_context8","_x11","_x9","setNote","setValue","_ref10","_callee10","_context10","Number","parseInt","Value","fromJSON","_x12","_ref11","_callee11","dBnote","_context11","_x13","_ref12","_callee12","_context12","_x14","_params$note","serializedContent","Plain","serialize","_ref13","_callee13","_context13","substr","toJSON","_x15","_ref14","_callee14","dbNote","_context14","_x16","noteIds","notes","console","log","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_2___default","withStyles","theme","root","props","classes","width","height","display","justifyContent","alignItems","assign","d","__webpack_exports__","getColorFromLabel","circleColor","optionColor","colors","filteredColor","filter","OPTION_DELETE","OPTION_MOVE","OPTION_RESTORE","OPEN_RENAME_FOLDER_MODAL","OPEN_DELETE_FOLDER_MODAL","OPEN_CREATE_FOLDER_MODAL","RENAME_FOLDER","DELETE_FOLDER","CREATE_FOLDER","GET_ALL_NOTES_FOLDER","GET_ALL_FOLDERS","FolderMenuOptions","doFolderAction","asyncToGenerator","regenerator_default","actionName","folder_id","close","setSnackError","_setOpenedFolder","_idb","setShowDropdown","_setOpen2","_idb2","_setOpenedFolder2","_value","_close","_setSnackError","_idb3","_setOpenedFolder3","_idb4","setFolders","_params$foldersToExcl","foldersToExclude","idbFolders","t0","setOpen","name","catch","loopFolders","includes","iconButtonStyle","padding","lineHeight","fontSize","fontWeight","setSelection","clearDropDown","clearSelectionCallback","useCallback","selectAllNotes","useEffect","allNotesSelected","useMemo","react_default","IconButton_default","onClick","Clear_default","Typography_default","component","concat","DoneAll_default","withRouter","folders","show","history","Spinner","maxHeight","opacity","react","key","selectFolder","rootTextField","backgroundColor","create","headerLabel","useContext","IDBContext","_useState","useState","_useState2","slicedToArray","Paper_default","TextField_default","InputProps","focused","onChange","e","target","variant","Button_default","FolderNameButton","showDropdown","stopPropagation","MoreOptions","setAnchorEl","systemFolder","shouldShowMoreOptions","currentTarget","Options","anchorEl","Menu_default","open","Boolean","onClose","option","MenuItem_default","HomePageHeader","_useState3","_useState4","_useState5","_useState6","HomePageHeader_FolderNameButton","HomePageHeader_MoreOptions","HomePageHeader_Options","Header_FolderList","Dialog_default","Header_DialogWithTextField","Header_DeleteFolder","Header","homePageHeaderProps","objectWithoutProperties","Header_SelectionHeader","Header_HomePageHeader","searchWorker","workerize","searchNotes","debounce","searchText","search","background","borderRadius","notchedOutline","border","marginRight","marginLeft","clearValue","placeholder","startAdornment","InputAdornment_default","position","Search_default","endAdornment","input","cardRootStyle","boxSizing","margin","textOverflow","overflow","isCheceked","checkCallback","toConsumableArray","noteClicked","Card_default","getReadableTimeStamp","Checkbox_default","bottom","right","zIndex","checked","icon","RadioButtonUnchecked_default","checkedIcon","CheckCircleRounded_default","NoNotesFallback","alignSelf","memo","fetching","NotesContainer_Note","NotesContainer_NoNotesFallback","prevProps","nextProps","prevNotes","prevSelection","prevFetching","nextNotes","nextSelection","nextFetching","fabRoot","&:hover","iconRoot","replace","createNote","Fab_default","Add_default","BottomOption","Icon","callback","buttonRoot","listItemPrimary","maxWidth","whiteSpace","flexJustifyCenter","options","setCreateDialogOpen","deleteNotesCallback","moveToCallback","closeDialog","openDialog","BottomNotesOperations_BottomOption","Folder","Restore","Delete","getBottomOptionProps","scroll","ListItem_default","ListItemText_default","primary","Divider_default","List_default","Fragment","button","HomePage","match","snackError","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","bottomOptions","isTrashFolder","closeSnackBar","showBottomToolbar","HomePage_Header","HomePage_SearchBar","HomePage_NotesContainer","HomePage_AddNotes","HomePage_BottomNotesOperations","Snackbar_default","autoHideDuration","message","DEFAULT_NOTE_TEXT","initializeIDB","openDb","upgradeDb","oldVersion","createObjectStore","keyPath","autoIncrement","createIndex","unique","deserialize","NotePage","React","lazy","bind","FourOhFour","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Provider","fallback","react_router_dom","basename","react_router","path","exact","to","pathname","state","from","location","Component","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","getTwelveHourFormat","hours","minutes","period","diffTimestamp","date","dateString","toDateString","_timeString$split","toTimeString","split","_timeString$split2","_home_melwyns_Desktop_git_repos_Notas_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","_dateString$split","_dateString$split2","dayOfWeek","month","day","year","time"],"mappings":"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","file":"static/js/main.4b69341f.chunk.js","sourcesContent":["import React from 'react';\n\nconst TextView = ({ children, style, className }) => <span style={style} className={className}>{children}</span>;\n\nexport default TextView;","import { createContext } from 'react';\n\nconst idbContext = createContext();\n\nexport default idbContext;\n","import { Value } from 'slate';\nimport Plain from 'slate-plain-serializer';\n\nimport defaultContent from '../contants/noteDefaultValue.json';\n\nimport { WHITE } from '../contants/noteColors';\n\nconst CREATE_NOTE = { operation: 'create_note' };\nconst GET_ALL_NOTES = { operation: 'get_all_notes' };\nconst DELETE_NOTES = { operation: 'delete_notes' };\nconst MOVE_NOTES = { operation: 'move_notes' };\n\nconst GET_NOTE_BY_ID = { operation: 'get_note_by_id' };\nconst CHANGE_NOTE_COLOR = { operation: 'change_note_color' };\nconst SAVE_NOTE = { operation: 'save_note' };\nconst GET_NOTES_BY_IDS = { operation: 'get_notes_by_ids' };\n\nconst updateOpenedFolder = async (db, folderId, setOpenedFolder) => {\n\tlet tx = db.transaction('folders', 'readonly');\n\tlet foldersStore = tx.objectStore('folders');\n\tlet folder = await foldersStore.get(folderId);\n\tsetOpenedFolder(folder);\n};\n\nconst doNoteAction = (action, params) => {\n\tswitch (action) {\n\t\tcase CREATE_NOTE.operation: {\n\t\t\tconst { idb, openedFolder, setOpenedFolder, changeRoute } = params;\n\t\t\tconst timestamp = new Date().getTime();\n\t\t\tidb\n\t\t\t\t.then(async (db) => {\n\t\t\t\t\tlet tx = db.transaction(['notes', 'folders'], 'readwrite');\n\t\t\t\t\tlet notesStore = tx.objectStore('notes');\n\t\t\t\t\tlet foldersStore = tx.objectStore('folders');\n\n\t\t\t\t\tlet openedFolderFromDB = await foldersStore.get(openedFolder.id);\n\t\t\t\t\topenedFolderFromDB.count += 1;\n\n\t\t\t\t\tfoldersStore.put(openedFolderFromDB);\n\n\t\t\t\t\tnotesStore.add({\n\t\t\t\t\t\tcolor: WHITE.label,\n\t\t\t\t\t\tcontent: '',\n\t\t\t\t\t\tpreviewContent: '',\n\t\t\t\t\t\tstructuredContent: defaultContent,\n\t\t\t\t\t\theading: '',\n\t\t\t\t\t\tfolderId: openedFolder.id,\n\t\t\t\t\t\tcreationTimestamp: timestamp,\n\t\t\t\t\t\tlastModifiedTimestamp: timestamp\n\t\t\t\t\t});\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetOpenedFolder(openedFolder);\n\t\t\t\t\tidb.then(async db => {\n\t\t\t\t\t\tlet tx = db.transaction(['notes'], 'readonly');\n\t\t\t\t\t\tlet store = tx.objectStore('notes');\n\t\t\t\t\t\tlet index = store.index('notesCreationTimestamp');\n\t\t\t\t\t\tlet note = await index.get(timestamp);\n\t\t\t\t\t\tchangeRoute(note.id);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase GET_ALL_NOTES.operation: {\n\t\t\tconst { idb, openedFolder, setFetching, setNotes } = params;\n\t\t\tconst folderNotes = [];\n\t\t\tif (openedFolder) {\n\t\t\t\tidb\n\t\t\t\t\t.then((db) => {\n\t\t\t\t\t\tsetFetching(true);\n\t\t\t\t\t\tlet tx = db.transaction('notes', 'readonly');\n\t\t\t\t\t\tlet store = tx.objectStore('notes');\n\t\t\t\t\t\tlet index = store.index('notesFolderId');\n\t\t\t\t\t\tlet range = IDBKeyRange.only(openedFolder.id);\n\t\t\t\t\t\tif (openedFolder.id === 1) {\n\t\t\t\t\t\t\trange = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn index.openCursor(range);\n\t\t\t\t\t})\n\t\t\t\t\t.then(function cursorLoop(cursor) {\n\t\t\t\t\t\tif (!cursor) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cursor.value.folderId === 2 && openedFolder.id !== 2) {\n\t\t\t\t\t\t\treturn cursor.continue().then(cursorLoop);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst { value } = cursor;\n\t\t\t\t\t\tfolderNotes.push(value);\n\t\t\t\t\t\treturn cursor.continue().then(cursorLoop);\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tsetNotes(folderNotes);\n\t\t\t\t\t\tsetFetching(false);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase DELETE_NOTES.operation: {\n\t\t\tconst { idb, selection, openedFolder, setOpenedFolder } = params;\n\t\t\tidb\n\t\t\t\t.then(async (db) => {\n\t\t\t\t\tconst timestamp = new Date().getTime();\n\t\t\t\t\tlet tx = db.transaction(['notes', 'folders'], 'readwrite');\n\t\t\t\t\tlet notesObjectStore = tx.objectStore('notes');\n\t\t\t\t\tlet foldersObjectStore = tx.objectStore('folders');\n\n\t\t\t\t\tlet trashFolder = await foldersObjectStore.get(2);\n\n\t\t\t\t\tif (openedFolder.id === 2) {\n\t\t\t\t\t\tselection.map((noteId) => notesObjectStore.delete(noteId));\n\t\t\t\t\t\ttrashFolder.count -= selection.length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet folderIdNotesMap = {};\n\n\t\t\t\t\t\tPromise.all(selection.map(async (noteId) => {\n\t\t\t\t\t\t\tlet note = await notesObjectStore.get(+noteId);\n\t\t\t\t\t\t\tif (folderIdNotesMap[note.folderId]) {\n\t\t\t\t\t\t\t\tfolderIdNotesMap[note.folderId] += 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfolderIdNotesMap[note.folderId] = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnote.folderId = 2;\n\t\t\t\t\t\t\tnotesObjectStore.put(note);\n\t\t\t\t\t\t})).then(() => {\n\t\t\t\t\t\t\tfolderIdNotesMap[1] = selection.length;\n\t\t\t\t\t\t\tObject.keys(folderIdNotesMap).map(async folderId => {\n\t\t\t\t\t\t\t\tconst folder = await foldersObjectStore.get(+folderId);\n\t\t\t\t\t\t\t\tfolder.count -= folderIdNotesMap[folderId];\n\t\t\t\t\t\t\t\tfolder.timestamp = timestamp;\n\t\t\t\t\t\t\t\tfoldersObjectStore.put(folder);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\ttrashFolder.count += selection.length;\n\t\t\t\t\t\t\ttrashFolder.timestamp = timestamp;\n\t\t\t\t\t\t\tfoldersObjectStore.put(trashFolder);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tidb.then((db) => updateOpenedFolder(db, openedFolder.id, setOpenedFolder));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase MOVE_NOTES.operation: {\n\t\t\tconst { idb, selection, openedFolder, setOpenedFolder, moveToFolderId } = params;\n\t\t\tidb\n\t\t\t\t.then(async (db) => {\n\t\t\t\t\tconst timestamp = new Date().getTime();\n\t\t\t\t\tlet tx = db.transaction(['folders', 'notes'], 'readwrite');\n\t\t\t\t\tlet notesStore = tx.objectStore('notes');\n\t\t\t\t\tlet foldersStore = tx.objectStore('folders');\n\t\t\t\t\tlet folderIdNotesMap = {};\n\n\t\t\t\t\tlet dstFolder = await foldersStore.get(+moveToFolderId);\n\n\t\t\t\t\tawait Promise.all(selection.map(async (noteId) => {\n\t\t\t\t\t\tlet note = await notesStore.get(+noteId);\n\t\t\t\t\t\tif (folderIdNotesMap[note.folderId]) {\n\t\t\t\t\t\t\tfolderIdNotesMap[note.folderId] += 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfolderIdNotesMap[note.folderId] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnote.folderId = dstFolder.id;\n\t\t\t\t\t\treturn notesStore.put(note);\n\t\t\t\t\t}));\n\n\t\t\t\t\tif (+moveToFolderId === 2) {\n\t\t\t\t\t\tfolderIdNotesMap[1] = selection.length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete folderIdNotesMap[1];\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Promise.all(Object.keys(folderIdNotesMap).map(async folderId => {\n\t\t\t\t\t\tconst folder = await foldersStore.get(+folderId);\n\t\t\t\t\t\tfolder.count -= folderIdNotesMap[folderId];\n\t\t\t\t\t\tfolder.timestamp = timestamp;\n\t\t\t\t\t\treturn foldersStore.put(folder);\n\t\t\t\t\t}));\n\n\t\t\t\t\tdstFolder.count += selection.length;\n\t\t\t\t\tdstFolder.timestamp = timestamp;\n\t\t\t\t\tfoldersStore.put(dstFolder);\n\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tidb.then((db) => updateOpenedFolder(db, openedFolder.id, setOpenedFolder));\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase GET_NOTE_BY_ID.operation: {\n\t\t\tconst { noteId, idb, setNote, setValue } = params;\n\t\t\treturn idb\n\t\t\t\t.then(async db => {\n\t\t\t\t\tlet tx = db.transaction(['notes'], 'readonly');\n\t\t\t\t\tlet store = tx.objectStore('notes');\n\t\t\t\t\tlet note = await store.get(Number.parseInt(noteId));\n\t\t\t\t\tsetValue(Value.fromJSON(note.structuredContent));\n\t\t\t\t\tsetNote(note);\n\t\t\t\t});\n\t\t}\n\t\tcase CHANGE_NOTE_COLOR.operation: {\n\t\t\tconst { note, idb, setNote, color } = params;\n\t\t\treturn idb.then(async (db) => {\n\t\t\t\tlet tx = db.transaction(['notes'], 'readwrite');\n\t\t\t\tlet store = tx.objectStore('notes');\n\t\t\t\tlet dBnote = await store.get(note.id);\n\t\t\t\tdBnote.color = color;\n\t\t\t\tstore.put(dBnote);\n\t\t\t\treturn tx.complete;\n\t\t\t}).then(() => {\n\t\t\t\tidb.then(async db => {\n\t\t\t\t\tlet tx = db.transaction(['notes'], 'readwrite');\n\t\t\t\t\tlet store = tx.objectStore('notes');\n\t\t\t\t\tlet dBnote = await store.get(note.id);\n\t\t\t\t\tsetNote(dBnote);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\tcase SAVE_NOTE.operation: {\n\t\t\tconst { idb, note: { id, folderId }, value, setNote } = params;\n\t\t\tconst serializedContent = Plain.serialize(value);\n\t\t\treturn idb.then(async db => {\n\t\t\t\tlet tx = db.transaction(['notes', 'folders'], 'readwrite');\n\t\t\t\tlet notesStore = tx.objectStore('notes');\n\t\t\t\tlet foldersStore = tx.objectStore('folders');\n\t\t\t\tlet note = await notesStore.get(id);\n\t\t\t\tlet folder = await foldersStore.get(folderId);\n\t\t\t\tlet timestamp = new Date().getTime();\n\t\t\t\tnote.content = serializedContent;\n\t\t\t\tnote.previewContent = serializedContent.substr(0, 80);\n\t\t\t\tnote.structuredContent = value.toJSON();\n\t\t\t\tnote.lastModifiedTimestamp = timestamp;\n\t\t\t\tfolder.timestamp = timestamp;\n\t\t\t\tnotesStore.put(note);\n\t\t\t\tfoldersStore.put(folder);\n\t\t\t\treturn tx.complete;\n\t\t\t}).then(() => {\n\t\t\t\tidb.then(async db => {\n\t\t\t\t\tlet tx = db.transaction(['notes'], 'readonly');\n\t\t\t\t\tlet notesStore = tx.objectStore('notes');\n\t\t\t\t\tlet dbNote = await notesStore.get(id);\n\t\t\t\t\tsetNote(dbNote);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tcase GET_NOTES_BY_IDS.operation: {\n\t\t\tconst { idb, noteIds, setNotes } = params;\n\t\t\treturn idb.then(db => {\n\t\t\t\tconst tx = db.transaction(['notes'], 'readonly');\n\t\t\t\tconst store = tx.objectStore('notes');\n\t\t\t\tPromise.all(noteIds.map(noteId => store.get(noteId))).then((notes => setNotes(notes)));\n\t\t\t});\n\t\t}\n\t\tdefault:\n\t\t\tconsole.log('INVALID_OPERATION');\n\t}\n};\n\nexport {\n\tCREATE_NOTE,\n\tGET_ALL_NOTES,\n\tDELETE_NOTES,\n\tMOVE_NOTES,\n\n\tGET_NOTE_BY_ID,\n\tCHANGE_NOTE_COLOR,\n\tSAVE_NOTE,\n\tGET_NOTES_BY_IDS,\n};\n\nexport default doNoteAction;\n","import React from 'react'; \nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropsTypes from 'prop-types';\n\nconst Spinner = props => {\n    const {classes} = props;\n    return (<div style={{\n        width: '100%',\n        height: '50vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }}>\n        <CircularProgress className={classes.root} {...props}/>\n        </div>);\n}\n\nSpinner.propTypes = {\n    classes: PropsTypes.object,\n};\n\n// TODO: fix this\nconst styles = theme => ({\n    root: {\n        color: '#969696',\n    }\n});\n\nexport default withStyles(styles)(Spinner);","const WHITE = {\n    label: 'white',\n    value: '#f5f5f5',\n    circleColor: '#e0e0e0',\n    optionColor: '#fbc02d',\n}\nconst RED = {\n    label: 'red',\n    value: '#ef9a9a',\n    circleColor: '#ef5350',\n    optionColor: '#ef5350',\n}\nconst GREEN = {\n    label: 'green',\n    value: '#a5d6a7',\n    circleColor: '#43a047',\n    optionColor: '#43a047',\n}\nconst BLUE = {\n    label: 'blue',\n    value: '#90caf9',\n    circleColor: '#1e88e5',\n    optionColor: '#1e88e5',\n}\nconst YELLOW = {\n    label: 'yellow',\n    value: '#fff59d',\n    circleColor: '#fbc02d',\n    optionColor: '#fbc02d',\n}\n\nconst colors = [WHITE, RED, GREEN, BLUE, YELLOW];\n\nconst getColorFromLabel = (label, color) => {\n    const filteredColor = colors.filter(color => color.label === label)[0];\n    return filteredColor ? filteredColor[color] : WHITE.value;\n}\n\nexport {\n    WHITE,\n    RED,\n    GREEN,\n    BLUE,\n    YELLOW,\n    getColorFromLabel,\n}\n\nexport default colors;","import { isTrashFolder } from './utils';\n\nconst OPTION_DELETE = {\n    operation: 'delete',\n    label: 'Delete',\n};\nconst OPTION_MOVE = {\n    operation: 'move',\n    label: 'Move',\n};\nconst OPTION_RESTORE = {\n    operation: 'restore',\n    label: 'Restore'\n};\n\nconst options = (folder) => (\n    folder && [(isTrashFolder(folder) ? OPTION_RESTORE : OPTION_MOVE), OPTION_DELETE]) || [];\n\n\nexport {\n    options,\n    OPTION_DELETE,\n    OPTION_MOVE,\n    OPTION_RESTORE\n}","const OPEN_RENAME_FOLDER_MODAL = { label: 'Rename', operation: 'open_rename_folder_modal' };\nconst OPEN_DELETE_FOLDER_MODAL = { label: 'Delete', operation: 'open_delete_folder_modal' };\nconst OPEN_CREATE_FOLDER_MODAL = { operation: 'open_create_folder_modal' };\nconst RENAME_FOLDER = { operation: 'rename_folder' };\nconst DELETE_FOLDER = { operation: 'delete_folder' };\nconst CREATE_FOLDER = { operation: 'create_foler' };\nconst OPEN_SETTINGS = { label: 'Open Settings', operation: 'open_settings' };\nconst GET_ALL_NOTES_FOLDER = { operation: 'get_all_notes_folder' }\nconst GET_ALL_FOLDERS = { operation: 'get_all_folders' };\n\nconst FolderMenuOptions = [OPEN_RENAME_FOLDER_MODAL, OPEN_DELETE_FOLDER_MODAL];\n\nconst doFolderAction = async (actionName, folder_id, params) => {\n\tswitch (actionName) {\n\t\tcase OPEN_RENAME_FOLDER_MODAL.operation: {\n\t\t\tconst { setOpen } = params;\n\t\t\tsetOpen(RENAME_FOLDER.operation);\n\t\t\tbreak;\n\t\t}\n\t\tcase OPEN_DELETE_FOLDER_MODAL.operation: {\n\t\t\tconst { setOpen } = params;\n\t\t\tsetOpen(DELETE_FOLDER.operation);\n\t\t\tbreak;\n\t\t}\n\t\tcase RENAME_FOLDER.operation: {\n\t\t\tconst { setOpenedFolder, idb, value, close, setSnackError } = params;\n\t\t\tidb\n\t\t\t\t.then(async (db) => {\n\t\t\t\t\tlet tx = db.transaction('folders', 'readwrite');\n\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\tlet folder = await store.get(folder_id);\n\n\t\t\t\t\tfolder.name = value;\n\t\t\t\t\tfolder.timestamp = new Date().getTime();\n\t\t\t\t\tstore.put(folder);\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tidb.then(async (db) => {\n\t\t\t\t\t\tlet tx = db.transaction('folders', 'readonly');\n\t\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\t\tlet folder = await store.get(folder_id);\n\t\t\t\t\t\tsetOpenedFolder(folder);\n\t\t\t\t\t\tclose();\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tsetSnackError('A folder with the same name already exists.');\n\t\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\t\tcase DELETE_FOLDER.operation: {\n\t\t\tconst { setOpenedFolder, idb } = params;\n\t\t\tidb\n\t\t\t\t.then((db) => {\n\t\t\t\t\tlet tx = db.transaction('folders', 'readwrite');\n\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\tstore.delete(folder_id);\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tidb.then(async (db) => {\n\t\t\t\t\t\tlet tx = db.transaction('folders', 'readonly');\n\t\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\t\tlet folder = await store.get(1);\n\t\t\t\t\t\tsetOpenedFolder(folder);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase OPEN_CREATE_FOLDER_MODAL.operation: {\n\t\t\tconst { setShowDropdown, setOpen } = params;\n\t\t\tsetShowDropdown(false);\n\t\t\tsetOpen(CREATE_FOLDER.operation);\n\t\t\tbreak;\n\t\t}\n\t\tcase CREATE_FOLDER.operation: {\n\t\t\tconst { idb, setOpenedFolder, value, close, setSnackError } = params;\n\t\t\tidb\n\t\t\t\t.then((db) => {\n\t\t\t\t\tlet tx = db.transaction('folders', 'readwrite');\n\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\tconst timestamp = new Date().getTime();\n\t\t\t\t\tstore.add({\n\t\t\t\t\t\tname: value,\n\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\ttimestamp\n\t\t\t\t\t});\n\t\t\t\t\treturn tx.complete;\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tidb.then(async (db) => {\n\t\t\t\t\t\tlet tx = db.transaction('folders', 'readonly');\n\t\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\t\tlet index = store.index('folderNames');\n\t\t\t\t\t\tlet folder = await index.get(value);\n\t\t\t\t\t\tsetOpenedFolder(folder);\n\t\t\t\t\t\tclose();\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tsetSnackError('A folder with the same name already exists.');\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase GET_ALL_NOTES_FOLDER.operation: {\n\t\t\tconst { idb, setOpenedFolder } = params;\n\t\t\tidb\n\t\t\t\t.then(async (db) => {\n\t\t\t\t\tlet tx = db.transaction('folders', 'readonly');\n\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\tlet folder = await store.get(folder_id);\n\t\t\t\t\tsetOpenedFolder(folder);\n\t\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase GET_ALL_FOLDERS.operation: {\n\t\t\tconst { idb, setFolders, foldersToExclude = [] } = params;\n\t\t\tconst idbFolders = [];\n\t\t\treturn idb\n\t\t\t\t.then((db) => {\n\t\t\t\t\tlet tx = db.transaction('folders', 'readonly');\n\t\t\t\t\tlet store = tx.objectStore('folders');\n\t\t\t\t\treturn store.openCursor();\n\t\t\t\t})\n\t\t\t\t.then(function loopFolders(cursor) {\n\t\t\t\t\tif (!cursor) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (foldersToExclude.includes(cursor.value.id)) {\n\t\t\t\t\t\treturn cursor.continue().then(loopFolders);\n\t\t\t\t\t}\n\t\t\t\t\tlet { value } = cursor;\n\t\t\t\t\tidbFolders.push(value);\n\t\t\t\t\treturn cursor.continue().then(loopFolders);\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetFolders(idbFolders);\n\t\t\t\t});\n\t\t}\n\t\tdefault:\n\t\t\tconsole.log('INVALID_OPERATION');\n\t}\n};\n\nexport {\n\tFolderMenuOptions,\n\tOPEN_RENAME_FOLDER_MODAL,\n\tOPEN_DELETE_FOLDER_MODAL,\n\tOPEN_CREATE_FOLDER_MODAL,\n\tRENAME_FOLDER,\n\tDELETE_FOLDER,\n\tOPEN_SETTINGS,\n\tCREATE_FOLDER,\n\tGET_ALL_NOTES_FOLDER,\n\tGET_ALL_FOLDERS\n};\n\nexport default doFolderAction;\n","import React, { useCallback, useMemo, useEffect } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Clear from '@material-ui/icons/Clear';\nimport SelectAll from '@material-ui/icons/DoneAll';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst iconButtonStyle = { padding: '0 12px' };\n\nconst SelectionHeader = ({ selection, setSelection, clearDropDown, notes, classes }) => {\n    const clearSelectionCallback = useCallback(() => {\n        setSelection([]);\n    }, []);\n\n    const selectAllNotes = useCallback(() => {\n        if (selection.length === notes.length) {\n            setSelection([]);\n        } else {\n            setSelection(notes.map(note => note.id));\n        }\n    }, [selection]);\n\n    useEffect(() => clearDropDown(), []);\n\n    const allNotesSelected = useMemo(() => notes.length === selection.length, [selection]);\n\n    return (<div className=\"container--selectionn-header\">\n        <IconButton style={iconButtonStyle} onClick={clearSelectionCallback}>\n            <Clear />\n        </IconButton>\n        <Typography component=\"h2\" className={classes.heading}>\n            {\n                selection.length === 1 ?\n                    `1 item selected` :\n                    `${selection.length} items selected`\n            }\n        </Typography>\n        <IconButton style={iconButtonStyle} onClick={selectAllNotes}>\n            <SelectAll style={(allNotesSelected ? { color: '#1e88e5' } : {})} />\n        </IconButton>\n    </div>);\n};\n\nconst styles = theme => ({\n    heading: {\n        lineHeight: '42px',\n        fontSize: '16px',\n        fontWeight: 700,\n    }\n});\n\nexport default withStyles(styles)(SelectionHeader);","import React, { Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Spinner from '../../../components/Spinner';\n\nimport doFolderAction, { OPEN_CREATE_FOLDER_MODAL } from '../../../actions/doFolderAction';\n\nconst selectFolder = (folder, history) => history.push(`/folder/${folder.id}`);\n\nconst FolderList = ({ folders, setShowDropdown, openedFolder, setOpen, show, history }) => {\n\tif (!folders && show) {\n\t\treturn <Spinner />;\n\t}\n\n\treturn (\n\t\t<div className=\"container--list-item\" style={(show ? {} : { maxHeight: 0, opacity: 0 })}>\n\t\t\t{show && folders.map((folder) => (\n\t\t\t\t<Fragment key={`list-item-${folder.id}`}>\n\t\t\t\t\t<div className=\"list-item\" onClick={() => selectFolder(folder, history)}>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`list-item-label ${openedFolder.id === folder.id\n\t\t\t\t\t\t\t\t? 'list-item-label__bold'\n\t\t\t\t\t\t\t\t: ''}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{folder.name}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName={`list-item-label ${openedFolder.id === folder.id\n\t\t\t\t\t\t\t\t? 'list-item-label__bold'\n\t\t\t\t\t\t\t\t: ''}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{folder.count}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"separator\" />\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t\t{show && <div className=\"list-item\" key=\"new-folder\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdoFolderAction(OPEN_CREATE_FOLDER_MODAL.operation, undefined, { setShowDropdown, setOpen })\n\t\t\t\t}}>\n\t\t\t\t<div className=\"new-folder-container\">\n\t\t\t\t\t<div className=\"plus-icon\">+</div>New Folder\n\t\t\t\t</div>\n\t\t\t</div>}\n\t\t</div>\n\t);\n};\n\nexport default withRouter(FolderList);","import React, { useState, useContext } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport doFolderAction, { RENAME_FOLDER, CREATE_FOLDER } from '../../../actions/doFolderAction';\nimport IDBContext from '../../../contexts/idbContext';\n\nconst DialogWithTextField = (props) => {\n\tconst { classes } = props;\n\tconst { openedFolder, close, setOpenedFolder, create, setSnackError } = props;\n\tconst headerLabel = (create && 'New Folder') || 'Rename Folder';\n\tconst operation = (create && CREATE_FOLDER.operation) || RENAME_FOLDER.operation\n\n\tconst { idb } = useContext(IDBContext);\n\tconst [value, setValue] = useState(create ? 'Unnamed Folder' : openedFolder.name);\n\n\treturn (\n\t\t<Paper className={classes.root}>\n\t\t\t<div>{headerLabel}</div>\n\t\t\t<TextField\n\t\t\t\tvalue={value}\n\t\t\t\tclassName={classes.rootTextField}\n\t\t\t\tInputProps={{\n\t\t\t\t\tclasses: {\n\t\t\t\t\t\troot: classes.rootTextField,\n\t\t\t\t\t\tfocused: classes.rootTextField\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonChange={(e) => setValue(e.target.value)}\n\t\t\t\tvariant=\"outlined\"\n\t\t\t/>\n\t\t\t<Button onClick={() => {\n\t\t\t\tdoFolderAction(operation, openedFolder.id, { setOpenedFolder, idb, value, close, setSnackError });\n\t\t\t}}>Ok</Button>\n\t\t\t<Button onClick={close}> Cancel</Button>\n\t\t</Paper>\n\t);\n};\n\nconst styles = (theme) => ({\n\troot: {\n\t\theight: 150,\n\t\twidth: 250\n\t},\n\trootTextField: {\n\t\tbackgroundColor: '#eee'\n\t}\n});\n\nexport default withStyles(styles)(DialogWithTextField);\n","import React, { useContext } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport IDBContext from '../../../contexts/idbContext';\n\nimport doFolderAction, { DELETE_FOLDER } from '../../../actions/doFolderAction';\n\nconst DeleteFolder = (props) => {\n    const { classes, close } = props;\n    const { openedFolder, setOpenedFolder } = props;\n    const { idb } = useContext(IDBContext);\n\n    return (<Paper className={classes.root}>\n        <div>Delete Folder</div>\n        <div>{`Delete ${openedFolder.name} ?`}</div>\n        <Button\n            onClick={() => {\n                doFolderAction(DELETE_FOLDER.operation, openedFolder.id, { setOpenedFolder, idb });\n                close();\n            }\n            }>\n            Delete\n        </Button>\n        <Button\n            onClick={close}>\n            Cancel\n        </Button>\n    </Paper>);\n}\n\nconst styles = (theme) => ({\n    root: {\n        height: 150,\n        width: 250\n    },\n});\n\n\nexport default withStyles(styles)(DeleteFolder);","import React, { useState, Fragment, useContext, useEffect, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport doFolderAction, { FolderMenuOptions, RENAME_FOLDER, CREATE_FOLDER, GET_ALL_FOLDERS } from '../../../actions/doFolderAction';\n\nimport IDBContext from '../../../contexts/idbContext';\n\nimport FolderList from './FolderList';\nimport DialogWithTextField from './DialogWithTextField';\nimport DeleteFolder from './DeleteFolder';\n\nconst HomePageHeader = ({ openedFolder, setOpenedFolder, setSnackError, showDropdown, setShowDropdown }) => {\n\tconst [folders, setFolders] = useState([]);\n\tconst [anchorEl, setAnchorEl] = useState(null);\n\tconst { idb } = useContext(IDBContext);\n\tconst [open, setOpen] = useState(null);\n\tconst close = useCallback(() => {\n\t\tsetOpen(false);\n\t\tsetAnchorEl(null);\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tdoFolderAction(GET_ALL_FOLDERS.operation, undefined, { idb, setFolders });\n\t\t},\n\t\t[openedFolder]\n\t);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"container--header\">\n\t\t\t\t<FolderNameButton {...{ setShowDropdown, showDropdown, openedFolder }} />\n\t\t\t\t<MoreOptions {...{ showDropdown, setShowDropdown, setAnchorEl, openedFolder }} />\n\t\t\t\t<Options {...{ anchorEl, setAnchorEl, openedFolder, setOpen, close }} />\n\t\t\t</div>\n\t\t\t<FolderList\n\t\t\t\tfolders={folders}\n\t\t\t\tsetShowDropdown={setShowDropdown}\n\t\t\t\tsetOpen={setOpen}\n\t\t\t\topenedFolder={openedFolder}\n\t\t\t\tshow={showDropdown}\n\t\t\t/>\n\t\t\t<Dialog open={Boolean(open)} onClose={close}>\n\t\t\t\t{[RENAME_FOLDER.operation, CREATE_FOLDER.operation].includes(open) ? (\n\t\t\t\t\t<DialogWithTextField\n\t\t\t\t\t\topenedFolder={openedFolder}\n\t\t\t\t\t\tclose={close}\n\t\t\t\t\t\tsetOpenedFolder={setOpenedFolder}\n\t\t\t\t\t\tcreate={open === CREATE_FOLDER.operation}\n\t\t\t\t\t\tsetSnackError={setSnackError}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t\t<DeleteFolder openedFolder={openedFolder} close={close} setOpenedFolder={setOpenedFolder} />\n\t\t\t\t\t)}\n\t\t\t</Dialog>\n\t\t</Fragment>\n\t);\n};\n\nconst FolderNameButton = ({ setShowDropdown, showDropdown, openedFolder: { name } }) =>\n\t(<div className=\"container--dropdown\">\n\t\t<Button\n\t\t\tonClick={(e) => {\n\t\t\t\te.stopPropagation();\n\t\t\t\tsetShowDropdown(!showDropdown);\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t<div className=\"dropdown-text\">{name}</div>\n\t\t\t\t<div className={!showDropdown ? 'dropdown-icon' : 'dropdown-icon dropdown-icon-rotate'} />\n\t\t\t</div>\n\t\t</Button>\n\t</div>);\n\nconst shouldShowMoreOptions = (showDropdown, openedFolder) => !showDropdown && openedFolder && !openedFolder.systemFolder;\n\nconst MoreOptions = ({ showDropdown, setShowDropdown, setAnchorEl, openedFolder }) =>\n\t(shouldShowMoreOptions(showDropdown, openedFolder) && <div className=\"container--more-options\" style={!showDropdown ? { maxHeight: 0 } : {}}>\n\t\t<IconButton\n\t\t\tonClick={(e) => {\n\t\t\t\te.stopPropagation();\n\t\t\t\tsetAnchorEl(e.currentTarget);\n\t\t\t\tsetShowDropdown(false);\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"more-options\" />\n\t\t</IconButton>\n\t</div>);\n\nconst Options = ({ anchorEl, setAnchorEl, openedFolder, setOpen, close, }) =>\n\t(<Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={(e) => setAnchorEl(null)}>\n\t\t{FolderMenuOptions.map(option =>\n\t\t\t<MenuItem\n\t\t\t\tkey={option.operation}\n\t\t\t\tstyle={{ fontSize: 14 }}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tdoFolderAction(option.operation, openedFolder.id, { setOpen, close });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{option.label}\n\t\t\t</MenuItem>\n\t\t)}\n\t</Menu>);\n\nexport default HomePageHeader;\n","import React from 'react';\n\nimport SelectionHeader from './SelectionHeader';\nimport HomePageHeader from './HomePageHeader';\n\nconst Header = ({ selection, notes, setSelection, clearDropDown, ...homePageHeaderProps }) => {\n\tconst isSelectionMode = selection.length;\n\n\treturn (isSelectionMode ?\n\t\t<SelectionHeader\n\t\t\tselection={selection}\n\t\t\tsetSelection={setSelection}\n\t\t\tclearDropDown={clearDropDown}\n\t\t\tnotes={notes} /> :\n\t\t<HomePageHeader {...homePageHeaderProps} />);\n};\n\nexport default Header;\n","import workerize from 'workerize';\n\nconst searchWorker = workerize(`\n    export function search(folderId, searchText) {\n            \n        return new Promise(function (resolve, reject) {\n            \n            var openRequest = indexedDB.open('notas', 1);\n\n            var dbPromise = new Promise(function (resolve1, reject1) {\n                openRequest.onsuccess = function(e) {\n                    resolve1(e.target.result);\n                };\n            }).then(function (db) {\n                var transaction = db.transaction(['notes'], 'readonly');\n                var store = transaction.objectStore('notes');\n                var index = store.index('notesFolderId');\n                var keyRange = folderId !== 1 ? IDBKeyRange.only(folderId) : undefined;\n                var filteredNoteIds = [];\n\n                var cursorPromise = new Promise(function (resolve2, reject2) {\n                    index.openCursor(keyRange).onsuccess = function (event) {\n                        var cursor = event.target.result;\n                        if(cursor) {\n                            var note = cursor.value;\n                            if (note.content.indexOf(searchText) >= 0) {\n                                filteredNoteIds.push(note.id)\n                            }\n                            cursor.continue();\n                        } else {\n                            resolve(filteredNoteIds);\n                        }\n                    };\n                });\n                \n            });\n        });\n    }\n`);\n\nexport default searchWorker;","import React, { useState, useCallback, useContext } from 'react';\nimport { debounce } from 'lodash';\n\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport HighlightOff from '@material-ui/icons/Clear';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { withStyles } from '@material-ui/core/styles'\n\nimport idbContext from '../../../contexts/idbContext';\n\nimport searchWorker from '../../../workers/search';\nimport doNoteAction, { GET_NOTES_BY_IDS } from '../../../actions/doNoteAction';\n\nconst searchNotes = debounce(async (folderId, searchText, idb, setNotes) => {\n    const noteIds = await searchWorker.search(folderId, searchText);\n    doNoteAction(GET_NOTES_BY_IDS.operation, {idb, noteIds, setNotes})\n}, 400);\n\nconst SearchBar = ({ classes, openedFolder, setNotes }) => {\n    const {idb} = useContext(idbContext);\n    const [value, setValue] = useState('');\n    const clearValue = useCallback(() => {\n        searchNotes(openedFolder.id, '', idb, setNotes);\n        setValue('');\n    }, [openedFolder]);\n\n    return (\n        <div className=\"container--search-bar\">\n            <TextField\n                className={classes.root}\n                style={{ fontSize: 17 }}\n                value={value}\n                placeholder=\"Search notes\"\n                onChange={(e) => {\n                    searchNotes(openedFolder.id, e.target.value, idb, setNotes);\n                    setValue(e.target.value)\n                }}\n                variant=\"outlined\"\n                InputProps={{\n                    startAdornment: (<InputAdornment position=\"start\">\n                        <IconButton className={classes.marginLeft} >\n                            <SearchIcon style={{ fontSize: '17px' }} />\n                        </IconButton>\n                    </InputAdornment>),\n                    endAdornment: (Boolean(value) && <InputAdornment position=\"end\">\n                        <IconButton className={classes.marginRight} onClick={clearValue}>\n                            <HighlightOff style={{ fontSize: '17px' }} />\n                        </IconButton>\n                    </InputAdornment>),\n                    classes: {\n                        input: classes.fontSize,\n                        notchedOutline: classes.notchedOutline\n                    }\n                }} />\n        </div>);\n}\n\nconst styles = theme => ({\n    root: {\n        maxHeight: 30,\n        width: '100%',\n        background: '#dcdcdc',\n        borderRadius: '5px',\n    },\n    notchedOutline: {\n        border: 0\n    },\n    marginRight: {\n        marginRight: '-20px'\n    },\n    marginLeft: {\n        marginLeft: '-15px'\n    },\n    fontSize: {\n        fontSize: '12px'\n    }\n});\n\nexport default withStyles(styles)(SearchBar); ","import React, { useCallback, useMemo } from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckCircleOutline from '@material-ui/icons/RadioButtonUnchecked'\nimport CheckCirlce from '@material-ui/icons/CheckCircleRounded';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { getReadableTimeStamp } from '../../../application/utils';\nimport TextView from '../../../components/TextView';\nimport { getColorFromLabel } from '../../../contants/noteColors';\n\nconst cardRootStyle = ({ color }) => ({ backgroundColor: getColorFromLabel(color, 'value'), position: 'relative' });\n\nconst Note = props => {\n    const { note, note: { previewContent }, classes, selection, setSelection, history } = props;\n\n    const isCheceked = useMemo(() => selection.includes(note.id), [selection, note.id]);\n\n    const checkCallback = useCallback((e) => {\n        e.stopPropagation();\n        if (isCheceked) {\n            setSelection(selection.filter(noteId => noteId !== note.id));\n        } else {\n            setSelection([...selection, note.id]);\n        }\n    }, [selection, note.id]);\n    const noteClicked = useCallback(() => {\n        history.push(`/note/${note.id}`);\n    }, [note.id])\n\n    return <Card className={classes.root} style={cardRootStyle(note)} onClick={noteClicked}>\n        <p className={classes.content}>\n            <strong style={{ color: '#000' }}>{previewContent.substr(0, 20)}</strong>\n            {previewContent.substr(20)}\n        </p>\n        <div className=\"time-stamp-wrappper\">\n            <TextView className=\"text-view-content\">{getReadableTimeStamp(note.lastModifiedTimestamp)}</TextView>\n        </div>\n        <Checkbox style={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            padding: '5px',\n            zIndex: '2',\n        }}\n            checked={isCheceked}\n            icon={<CheckCircleOutline style={{ color: '#1e88e5' }} />}\n            checkedIcon={<CheckCirlce style={{ color: '#1e88e5' }} />}\n            onClick={checkCallback} />\n    </Card>\n}\n\nconst styles = theme => ({\n    root: {\n        height: '180px',\n        width: '140px',\n        boxSizing: 'border-box',\n        padding: '10px',\n        margin: '5px',\n    },\n    content: {\n        color: '#555',\n        fontSize: '14px',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        height: 'calc(100% - 35px)',\n    }\n});\n\nexport default withStyles(styles)(Note);","import React from 'react';\n\nconst NoNotesFallback = () => {\n    return (<div style={{\n        margin: '50% auto',\n        alignSelf: 'center',\n        fontSize: '18px',\n        fontWeight: 500,\n        color: '#6d6d6d',\n    }}>No Notes Here</div>);\n};\n\nexport default NoNotesFallback;\n\n","import React, { memo } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Note from './Note';\nimport NoNotesFallback from './NoNotesFallback';\nimport Spinner from '../../../components/Spinner';\n\nconst NotesContainer = ({ selection, setSelection, fetching, notes, history }) => {\n    return (<div className=\"container--notes\">\n        {\n            Boolean(notes.length) ?\n                notes.map(note =>\n                    <Note\n                        key={note.creationTimestamp}\n                        note={note}\n                        history={history}\n                        selection={selection}\n                        setSelection={setSelection} />) :\n                fetching ?\n                    <Spinner /> :\n                    <NoNotesFallback />\n        }\n    </div>);\n}\n\nconst areNotesEqual = (prevProps, nextProps) => {\n    const { notes: prevNotes, selection: prevSelection, fetching: prevFetching } = prevProps;\n    const { notes: nextNotes, selection: nextSelection, fetching: nextFetching } = nextProps;\n    return prevNotes === nextNotes && prevSelection === nextSelection && prevFetching === nextFetching;\n}\n\nexport default withRouter(memo(NotesContainer, areNotesEqual));","import React, { useCallback, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport doNoteAction, { CREATE_NOTE } from '../../../actions/doNoteAction';\nimport IDBContext from '../../../contexts/idbContext';\n\nconst AddNotes = ({ history, classes, openedFolder, setOpenedFolder, show }) => {\n    const { idb } = useContext(IDBContext);\n    const changeRoute = useCallback((noteId) => {\n        history.replace(`/note/${noteId}`);\n    }, []);\n    const createNote = useCallback(() => {\n        doNoteAction(CREATE_NOTE.operation, { idb, openedFolder, setOpenedFolder, changeRoute });\n    }, [openedFolder]);\n\n    return (show && <div className=\"container--add-notes\">\n        <Fab className={classes.fabRoot} onClick={createNote}>\n            <AddIcon className={classes.iconRoot} />\n        </Fab>\n    </div>);\n}\n\nconst styles = theme => ({\n    fabRoot: {\n        backgroundColor: '#ffc400',\n        '&:hover': {\n            backgroundColor: '#ffab00',\n        }\n    },\n    iconRoot: {\n        color: '#fff',\n        fontSize: '35px',\n    }\n});\n\nexport default withRouter(withStyles(styles)(AddNotes));","import React, { useCallback, useContext, useState } from 'react';\n\nimport Folder from '@material-ui/icons/FolderOutlined';\nimport Delete from '@material-ui/icons/DeleteOutlined';\nimport Restore from '@material-ui/icons/RestoreOutlined';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport IDBContext from '../../../contexts/idbContext';\n\nimport { OPTION_MOVE, OPTION_DELETE, OPTION_RESTORE } from '../../../application/noteOperations';\nimport doNoteAction, { DELETE_NOTES, MOVE_NOTES } from '../../../actions/doNoteAction';\nimport doFolderAction, { GET_ALL_FOLDERS } from '../../../actions/doFolderAction';\n\nconst BottomNotesOperations = ({ classes, options, show, openedFolder, selection, setOpenedFolder, setSelection, setCreateDialogOpen }) => {\n\tconst { idb } = useContext(IDBContext);\n\tconst [open, setOpen] = useState(false);\n\tconst [folders, setFolders] = useState([]);\n\n\tconst deleteNotesCallback = useCallback(\n\t\t() => {\n\t\t\tdoNoteAction(DELETE_NOTES.operation, { idb, selection, openedFolder, setOpenedFolder });\n\t\t\tsetSelection([]);\n\t\t},\n\t\t[selection]\n\t);\n\tconst moveToCallback = useCallback(\n\t\t(moveToFolderId) => {\n\t\t\tdoNoteAction(MOVE_NOTES.operation, { idb, selection, openedFolder, setOpenedFolder, moveToFolderId });\n\t\t\tsetSelection([]);\n\t\t\tcloseDialog();\n\t\t},\n\t\t[selection]\n\t);\n\tconst closeDialog = useCallback(() => {\n\t\tsetOpen(false);\n\t}, []);\n\tconst openDialog = useCallback(\n\t\tasync () => {\n\t\t\tconst foldersToExclude = [openedFolder.id];\n\t\t\tawait doFolderAction(GET_ALL_FOLDERS.operation, openedFolder.id, { idb, setFolders, foldersToExclude });\n\t\t\tsetOpen(true)\n\t\t},\n\t\t[openedFolder]\n\t);\n\tconst getBottomOptionProps = option => {\n\t\tswitch (option.operation) {\n\t\t\tcase OPTION_MOVE.operation:\n\t\t\t\treturn { option, Icon: Folder, callback: openDialog };\n\t\t\tcase OPTION_RESTORE.operation:\n\t\t\t\treturn { option, Icon: Restore, callback: () => moveToCallback(1) };\n\t\t\tcase OPTION_DELETE.operation:\n\t\t\t\treturn { option, Icon: Delete, callback: deleteNotesCallback };\n\t\t\tdefault:\n\t\t\t\treturn () => { }\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"container--bottom-toolbar\" style={show ? {} : { height: 0 }}>\n\t\t\t{\n\t\t\t\toptions.map(option =>\n\t\t\t\t\t<BottomOption\n\t\t\t\t\t\tkey={option.operation}\n\t\t\t\t\t\tclassName={classes.buttonRoot}\n\t\t\t\t\t\t{...getBottomOptionProps(option)} />)\n\t\t\t}\n\t\t\t<Dialog open={open} onClose={closeDialog} scroll=\"paper\">\n\t\t\t\t<ListItem>\n\t\t\t\t\t<ListItemText primary='Select Folder' classes={{ primary: classes.flexJustifyCenter }} />\n\t\t\t\t</ListItem>\n\t\t\t\t<Divider />\n\t\t\t\t<List style={{ maxHeight: '80vh', padding: 0 }}>\n\t\t\t\t\t{folders.map(folder => (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\tclasses={{ root: classes.flexJustifyCenter }}\n\t\t\t\t\t\t\t\tonClick={() => moveToCallback(folder.id)} key={folder.id}>\n\t\t\t\t\t\t\t\t<ListItemText primary={folder.name} classes={{ primary: classes.listItemPrimary }} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t<Divider />\n\t\t\t\t\t\t</>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t</Dialog>\n\t\t</div>\n\t);\n};\n\nconst BottomOption = ({ option, className, Icon, callback }) => (\n\t<div className=\"container--bottom-tool-button\">\n\t\t<Button className={className} onClick={callback}>\n\t\t\t<Icon />\n\t\t\t<span className=\"bottom-button-text\">{option.label}</span>\n\t\t</Button>\n\t</div>);\n\nconst styles = (theme) => ({\n\tbuttonRoot: {\n\t\twidth: '100%',\n\t\theight: '100%'\n\t},\n\tlistItemPrimary: {\n\t\tmaxWidth: '175px',\n\t\twhiteSpace: 'nowrap',\n\t\toverflow: 'hidden',\n\t\ttextOverflow: 'ellipsis',\n\t},\n\tflexJustifyCenter: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t}\n});\n\nexport default withStyles(styles)(BottomNotesOperations);\n","import React, { useState, useContext, useEffect, useCallback, useMemo } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport Spinner from '../../components/Spinner';\n\nimport './styles.css';\n\nimport IDBContext from '../../contexts/idbContext';\n\nimport { options } from '../../application/noteOperations';\n\nimport doNoteAction, { GET_ALL_NOTES } from './../../actions/doNoteAction';\nimport doFolderAction, { GET_ALL_NOTES_FOLDER } from './../../actions/doFolderAction';\n\nimport Header from './Header'\nimport SearchBar from './SearchBar';\nimport NotesContainer from './NotesContainer';\nimport AddNotes from './AddNotes';\nimport BottomNotesOperations from './BottomNotesOperations';\n\nconst HomePage = ({ match }) => {\n\tconst { idb } = useContext(IDBContext);\n\n\tconst [openedFolder, setOpenedFolder] = useState(null);\n\tconst [snackError, setSnackError] = useState(null);\n\tconst [showDropdown, setShowDropdown] = useState(false);\n\tconst [selection, setSelection] = useState([]);\n\tconst [notes, setNotes] = useState([]);\n\tconst [fetching, setFetching] = useState(true);\n\n\tconst bottomOptions = useMemo(() => options(openedFolder), [openedFolder]);\n\n\tconst clearDropDown = useCallback(() => {\n\t\tsetShowDropdown(false);\n\t}, []);\n\tconst closeSnackBar = useCallback(() => {\n\t\tsetSnackError(null);\n\t}, []);\n\n\tconst showBottomToolbar = selection.length !== 0;\n\tconst isTrashFolder = openedFolder && openedFolder.id === 2;\n\n\tuseEffect(() => {\n\t\tconst folderId = Number.parseInt(match.params.id);\n\t\tdoFolderAction(GET_ALL_NOTES_FOLDER.operation, folderId, { idb, setOpenedFolder });\n\t}, [match]);\n\n\tuseEffect(() => {\n\t\tdoNoteAction(GET_ALL_NOTES.operation, { idb, openedFolder, setFetching, setNotes });\n\t}, [openedFolder]);\n\n\n\tif (!openedFolder) {\n\t\treturn <Spinner />;\n\t}\n\n\treturn (\n\t\t<div className=\"container--home-page\" onClick={clearDropDown}>\n\t\t\t<Header\n\t\t\t\topenedFolder={openedFolder}\n\t\t\t\tsetOpenedFolder={setOpenedFolder}\n\t\t\t\tsetSnackError={setSnackError}\n\t\t\t\tshowDropdown={showDropdown}\n\t\t\t\tsetShowDropdown={setShowDropdown}\n\t\t\t\tnotes={notes}\n\t\t\t\tselection={selection}\n\t\t\t\tclearDropDown={clearDropDown}\n\t\t\t\tsetSelection={setSelection} />\n\t\t\t<SearchBar openedFolder={openedFolder} setNotes={setNotes} />\n\t\t\t<NotesContainer\n\t\t\t\tfetching={fetching}\n\t\t\t\tnotes={notes}\n\t\t\t\tselection={selection}\n\t\t\t\tsetSelection={setSelection} />\n\t\t\t<AddNotes\n\t\t\t\topenedFolder={openedFolder}\n\t\t\t\tsetOpenedFolder={setOpenedFolder}\n\t\t\t\tfetching={fetching}\n\t\t\t\tnotes={notes}\n\t\t\t\tshow={!showBottomToolbar && !isTrashFolder} />\n\t\t\t<BottomNotesOperations\n\t\t\t\toptions={bottomOptions}\n\t\t\t\tshow={showBottomToolbar}\n\t\t\t\tselection={selection}\n\t\t\t\topenedFolder={openedFolder}\n\t\t\t\tsetSelection={setSelection}\n\t\t\t\tsetOpenedFolder={setOpenedFolder} />\n\t\t\t<Snackbar\n\t\t\t\topen={Boolean(snackError)}\n\t\t\t\tautoHideDuration={2000}\n\t\t\t\tonClose={closeSnackBar}\n\t\t\t\tmessage={snackError} />\n\t\t</div>\n\t);\n};\n\nexport default HomePage;\n","/* eslint-disable */\n\nimport { openDb } from 'idb';\nimport Plain from 'slate-plain-serializer';\nimport { WHITE } from '../contants/noteColors';\n\nconst DEFAULT_NOTE_TEXT = 'This is supposed to be a long long long note asdasdasdasdadsasddasdasddasd';\n\nconst timestamp = new Date().getTime();\n\nexport const initializeIDB = () => {\n\treturn openDb('notas', 1, (upgradeDb) => {\n\t\tswitch (upgradeDb.oldVersion) {\n\t\t\tcase 0:\n\t\t\tcase 1:\n\t\t\t\tlet foldersObjectStore = upgradeDb.createObjectStore('folders', { keyPath: 'id', autoIncrement: true });\n\t\t\t\tfoldersObjectStore.createIndex('folderNames', 'name', { unique: true });\n\n\t\t\t\tfoldersObjectStore.add({ count: 1, timestamp: new Date().getTime(), name: 'All Notes', systemFolder: true });\n\t\t\t\tfoldersObjectStore.add({ count: 0, timestamp: new Date().getTime(), name: 'Trash', systemFolder: true });\n\n\t\t\t\tlet notesObjectStore = upgradeDb.createObjectStore('notes', { keyPath: 'id', autoIncrement: true });\n\t\t\t\tnotesObjectStore.createIndex('notesCreationTimestamp', 'creationTimestamp');\n\t\t\t\tnotesObjectStore.createIndex('notesLastModifiedTimestamp', 'lastModifiedTimestamp');\n\t\t\t\tnotesObjectStore.createIndex('notesFolderId', 'folderId');\n\n\t\t\t\t// TODO: sort out previewContent issue in Grid View\n\t\t\t\tnotesObjectStore.add(\n\t\t\t\t\t{\n\t\t\t\t\t\tcolor: WHITE.label,\n\t\t\t\t\t\tcontent: DEFAULT_NOTE_TEXT,\n\t\t\t\t\t\tpreviewContent: DEFAULT_NOTE_TEXT.substr(0, 80),\n\t\t\t\t\t\tstructuredContent: Plain.deserialize(DEFAULT_NOTE_TEXT).toJSON(),\n\t\t\t\t\t\tfolderId: 1,\n\t\t\t\t\t\tcreationTimestamp: timestamp,\n\t\t\t\t\t\tlastModifiedTimestamp: timestamp,\n\t\t\t\t\t});\n\t\t}\n\t});\n};\n","import React, { Component, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport HomePage from './pages/HomePage';\nimport Spinner from './components/Spinner';\n\nimport { initializeIDB } from './indexedDB';\n\nimport IDBContext from './contexts/idbContext';\n\nconst NotePage = React.lazy(() => import('./pages/NotePage'));\nconst FourOhFour = React.lazy(() => import('./pages/404'));\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.idb = initializeIDB();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<IDBContext.Provider value={{ idb: this.idb }}>\n\t\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t\t<Router basename=\"/Notas\">\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/\" exact component={props => <Redirect to={{\n\t\t\t\t\t\t\t\tpathname: \"/folder/1\",\n\t\t\t\t\t\t\t\tstate: { from: props.location }\n\t\t\t\t\t\t\t}} />} />\n\t\t\t\t\t\t\t<Route path=\"/folder/:id\" exact component={HomePage} />\n\t\t\t\t\t\t\t<Route path=\"/note/:id\" component={NotePage} />\n\t\t\t\t\t\t\t<Route component={FourOhFour} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Router>\n\t\t\t\t</Suspense>\n\t\t\t</IDBContext.Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const isTrashFolder = folder => folder.id === 2;\n\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 4 * WEEK;\nconst YEAR = 52 * WEEK;\n\nconst getTwelveHourFormat = (hours, minutes) => {\n    const period = hours > 12 ? 'PM' : 'AM';\n    const hour = hours % 12 || 12;\n    return `${hour}:${minutes} ${period}`;\n}\n\nconst getReadableTimeStamp = timestamp => {\n    const now = new Date().getTime();\n    const diffTimestamp = now - timestamp;\n    const date = new Date(timestamp);\n    const dateString = date.toDateString();\n    const timeString = date.toTimeString();\n    const [hours, minutes, ] = timeString.split(':');\n    const [dayOfWeek, month, day, year] = dateString.split(' ');\n    const time = getTwelveHourFormat(hours, minutes);\n\n    if (diffTimestamp <= DAY) {\n        // if same day -> time\n        return getTwelveHourFormat(hours, minutes);\n    } else if (diffTimestamp <= WEEK) {\n        // if same week -> day time\n        return `${dayOfWeek} ${time}`;\n    } else if (diffTimestamp <= MONTH) {\n        // if same month -> dd day\n        return `${dayOfWeek} ${day} ${time}`\n    } else if (diffTimestamp <= YEAR) {\n        // if same year -> dd month \n        return `${dayOfWeek} ${day} ${month}`\n    } else {\n        // else -> dd month year\n        return `${day} ${month} ${year}`\n    }\n}\n\nexport {\n    isTrashFolder,\n    getReadableTimeStamp\n}"],"sourceRoot":""}