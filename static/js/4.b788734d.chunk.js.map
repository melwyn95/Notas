{"version":3,"sources":["pages/NotePage/NoteHeaderToolbar/Circle.js","pages/NotePage/NoteHeaderToolbar/ColorSelector.js","pages/NotePage/NoteHeaderToolbar/index.js","contants/richTextOptions.js","pages/NotePage/NoteHeaderToolbar/RichTextOptions.js","pages/NotePage/NoteBody/index.js","workers/wordCount.js","pages/NotePage/index.js"],"names":["Circle","_ref","onClick","color","react_default","a","createElement","className","style","marginRight","borderRadius","backgroundColor","height","width","ColorSelector","note","setNote","idb","useContext","idbContext","colorOptions","colors","filter","option","label","Paper_default","display","padding","map","NoteHeaderToolbar_Circle","key","circleColor","doNoteAction","CHANGE_NOTE_COLOR","operation","iconSize","fontSize","getColorFromLabel","NoteHeaderToolbar","anchorEl","iconClick","backButtonClick","doneButtonClick","noteColor","editorRef","undo","useCallback","e","preventDefault","current","redo","KeyboardArrowLeft_default","Undo_default","Object","objectSpread","Redo_default","Done_default","marginLeft","MoreVert_default","Popper_default","open","Boolean","placement","NoteHeaderToolbar_ColorSelector","QUOTE","marks","options","defaultStyle","activeStyle","hasBlock","type","value","blocks","some","node","getIconForOption","isMark","isActive","activeMarks","mark","hasMark","includes","document","size","parent","getParent","first","FormatBold_default","FormatItalic_default","FormatUnderlined_default","FormatSize_default","FormatQuote_default","FormatListBulleted_default","FormatListNumbered_default","RichTextOptions","useMemo","justifyContent","boxShadow","margin","index_es","toggleMark","event","setBlocks","unwrapBlock","isList","isType","block","getClosest","wrapBlock","onClickBlock","dangerouslySetInnerHTML","__html","concat","saveNote","debounce","SAVE_NOTE","NoteBody","setValue","wordCount","Fragment","NoteHeaderToolbar_RichTextOptions","TextView","getReadableTimeStamp","lastModifiedTimestamp","slate_react_es","spellCheck","autoFocus","boxSizing","overflow","placeholder","ref","editor","onChange","_ref2","onKeyDown","next","renderNode","props","attributes","children","renderMark","worker","workerize","withRouter","match","history","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","_useState5","_useState6","toolTipAnchorEl","setToolTipAnchorEl","_useState7","_useState8","setWordCount","tools","stopPropagation","currentTarget","closeToolTip","replace","folderId","useEffect","noteId","params","id","GET_NOTE_BY_ID","wordCountWorker","then","countWords","useRef","NotePage_NoteHeaderToolbar","NotePage_NoteBody","Spinner"],"mappings":"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","file":"static/js/4.b788734d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Circle = ({ onClick, color }) =>\n    <div className=\"container--circle-icon\" style={{ marginRight: 10 }} onClick={onClick}>\n        <div style={{\n            borderRadius: '50%',\n            backgroundColor: color,\n            height: 12,\n            width: 12,\n        }} />\n    </div>;\n\nexport default Circle;","import React, { useContext } from 'react';\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Circle from './Circle';\n\nimport colors from '../../../contants/noteColors'\n\nimport doNoteAction, { CHANGE_NOTE_COLOR } from '../../../actions/doNoteAction';\nimport idbContext from '../../../contexts/idbContext';\n\nconst ColorSelector = ({ note, setNote }) => {\n    const { idb } = useContext(idbContext);\n    const colorOptions = colors.filter(option => option.label !== note.color);\n    const changeNoteColor = (color) => doNoteAction(CHANGE_NOTE_COLOR.operation, { idb, setNote, note, color });\n\n    return (<Paper style={{ display: 'flex', padding: 5 }}>\n        {colorOptions.map(option => <Circle key={option.label} color={option.circleColor} onClick={() => changeNoteColor(option.label)} />)}\n    </Paper>);\n}\n\nexport default ColorSelector;","import React, { useCallback } from 'react';\n\nimport Popper from '@material-ui/core/Popper';\n\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport Done from '@material-ui/icons/Done';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport Undo from '@material-ui/icons/Undo';\nimport Redo from '@material-ui/icons/Redo';\n\nimport ColorSelector from '../NoteHeaderToolbar/ColorSelector';\n\nimport { getColorFromLabel } from '../../../contants/noteColors';\n\nimport Circle from './Circle';\n\nconst iconSize = color => ({ fontSize: 25, color: getColorFromLabel(color, 'optionColor') });\n\nconst NoteHeaderToolbar = ({ anchorEl, iconClick, backButtonClick, doneButtonClick, noteColor, note, setNote, editorRef }) => {\n\n    const undo = useCallback((e) => {\n        e.preventDefault();\n        editorRef.current.undo();\n    }, []);\n    const redo = useCallback((e) => {\n        e.preventDefault();\n        editorRef.current.redo();\n    }, []);\n\n    return (<div className=\"container--header-toolbar\">\n        <KeyboardArrowLeft style={iconSize(noteColor)} onClick={backButtonClick} />\n        <Circle color={getColorFromLabel(noteColor, 'circleColor')} onClick={(e) => iconClick(e, 'change_color')} />\n        <Undo style={{ ...iconSize(noteColor), marginRight: 10 }} onClick={undo} />\n        <Redo style={{ ...iconSize(noteColor), marginRight: 10 }} onClick={redo} />\n        <Done style={{ ...iconSize(noteColor), marginRight: 10, marginLeft: 5 }} onClick={doneButtonClick}/>\n        <MoreVert style={iconSize(noteColor)} />\n        <Popper open={Boolean(anchorEl)} anchorEl={anchorEl} placement=\"bottom\">\n            <ColorSelector {...{ note, setNote }} />s\n        </Popper>\n    </div>);\n};\n\nexport default NoteHeaderToolbar;\n","const BOLD = 'bold';\nconst ITALIC = 'italic';\nconst UNDERLINE = 'underlined';\nconst HEADING = 'heading-two';\nconst BULLETED_LIST = 'bulleted-list';\nconst NUMBERED_LIST = 'numbered-list';\nconst QUOTE = 'block-quote';\n\nconst options = [BOLD, ITALIC, UNDERLINE, HEADING, QUOTE, BULLETED_LIST, NUMBERED_LIST];\n\nconst blocks = [HEADING, QUOTE, BULLETED_LIST, NUMBERED_LIST];\nconst marks = [BOLD, ITALIC, UNDERLINE];\n\nexport {\n    blocks,\n    marks,\n    BOLD,\n    ITALIC,\n    UNDERLINE,\n    HEADING,\n    QUOTE,\n    BULLETED_LIST,\n    NUMBERED_LIST,\n}\n\nexport default options;","import React, { useMemo } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport Bold from '@material-ui/icons/FormatBold';\nimport Italic from '@material-ui/icons/FormatItalic';\nimport Underline from '@material-ui/icons/FormatUnderlined';\nimport Heading from '@material-ui/icons/FormatSize'\nimport Quote from '@material-ui/icons/FormatQuote';\nimport BulletedList from '@material-ui/icons/FormatListBulleted';\nimport NumberedList from '@material-ui/icons/FormatListNumbered';\n\nimport { getColorFromLabel } from '../../../contants/noteColors';\n\nimport options, { marks, BOLD, ITALIC, UNDERLINE, HEADING, QUOTE, BULLETED_LIST, NUMBERED_LIST } from '../../../contants/richTextOptions';\nimport { IconButton } from '@material-ui/core';\n\nconst defaultStyle = { fontSize: 20 }\nconst activeStyle = { color: '#000', ...defaultStyle };\nconst DEFAULT_NODE = 'paragraph';\n\nconst hasMark = (type, value) => value.activeMarks.some(mark => mark.type === type);\n\nconst hasBlock = (type, value) => value.blocks.some(node => node.type === type);\n\nconst RichTextOptions = ({ value, editorRef, note }) => {\n\n    const noteColor = useMemo(() => getColorFromLabel(note.color, 'circleColor'), [note])\n\n    const onClickMark = (event, type) => {\n        event.preventDefault()\n        editorRef.current.toggleMark(type)\n    }\n\n    const onClickBlock = (event, type) => {\n        event.preventDefault()\n        if (!editorRef.current) {\n            return;\n        }\n\n        const { value } = editorRef.current;\n        const { document } = value\n\n        if (type !== 'bulleted-list' && type !== 'numbered-list') {\n            const isActive = hasBlock(type, value)\n            const isList = hasBlock('list-item', value)\n\n            if (isList) {\n                editorRef.current\n                    .setBlocks(isActive ? DEFAULT_NODE : type)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list')\n            } else {\n                editorRef.current.setBlocks(isActive ? DEFAULT_NODE : type)\n            }\n        } else {\n            const isList = hasBlock('list-item', value)\n            const isType = value.blocks.some(block => {\n                return !!document.getClosest(block.key, parent => parent.type === type)\n            })\n\n            if (isList && isType) {\n                editorRef.current\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list')\n            } else if (isList) {\n                editorRef.current\n                    .unwrapBlock(\n                        type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'\n                    )\n                    .wrapBlock(type)\n            } else {\n                editorRef.current.setBlocks('list-item').wrapBlock(type)\n            }\n        }\n    }\n\n    return <Paper style={{\n        display: 'flex',\n        justifyContent: 'space-around',\n        boxShadow: 'none',\n        margin: '5px 0'\n    }}>\n\n        {\n            options.map(option =>\n                <IconButton\n                    key={option}\n                    style={{ padding: 10 }}\n                    onClick={e => marks.includes(option) ? onClickMark(e, option) : onClickBlock(e, option)}>\n                    {getIconForOption(option, marks.includes(option), value)}\n                </IconButton>)\n        }\n        <style dangerouslySetInnerHTML={\n            {\n                __html: `\n                    blockquote {\n                        border-left: 2px solid ${noteColor};\n                    }\n                `\n            }\n        } >\n        </style>\n    </Paper>;\n}\n\nconst getIconForOption = (option, isMark, value) => {\n    let isActive = isMark ? hasMark(option, value) : hasBlock(option, value);\n    if (['numbered-list', 'bulleted-list'].includes(option)) {\n        const { document, blocks } = value;\n\n        if (blocks.size > 0) {\n            const parent = document.getParent(blocks.first().key);\n            isActive = hasBlock('list-item', value) && parent && parent.type === option;\n        }\n    }\n    switch (option) {\n        case BOLD:\n            return <Bold style={isActive ? activeStyle : defaultStyle} />\n        case ITALIC:\n            return <Italic style={isActive ? activeStyle : defaultStyle} />\n        case UNDERLINE:\n            return <Underline style={isActive ? activeStyle : defaultStyle} />\n\n        case HEADING:\n            return <Heading style={isActive ? activeStyle : defaultStyle} />\n        case QUOTE:\n            return <Quote style={isActive ? activeStyle : defaultStyle} />\n        case BULLETED_LIST:\n            return <BulletedList style={isActive ? activeStyle : defaultStyle} />\n        case NUMBERED_LIST:\n            return <NumberedList style={isActive ? activeStyle : defaultStyle} />\n        default:\n            return null;\n    }\n}\n\nexport default RichTextOptions;","import React, { useContext } from 'react';\nimport { debounce } from 'lodash';\n\nimport { Editor } from 'slate-react'\n\nimport TextView from '../../../components/TextView';\nimport doNoteAction, { SAVE_NOTE } from '../../../actions/doNoteAction';\n\nimport { getReadableTimeStamp } from '../../../application/utils';\n\nimport RichTextOption from '../NoteHeaderToolbar/RichTextOptions';\nimport idbContext from '../../../contexts/idbContext';\n\nconst saveNote = debounce((idb, value, note, setNote) => {\n    doNoteAction(SAVE_NOTE.operation, { idb, value, note, setNote });\n}, 600);\n\nconst NoteBody = ({ editorRef, value, setValue, note, wordCount, setNote }) => {\n    const { idb } = useContext(idbContext);\n\n    const onKeyDown = (event, editor, next) => {\n        return next()\n    }\n\n    const renderNode = (props, editor, next) => {\n        const { attributes, children, node } = props\n\n        switch (node.type) {\n            case 'block-quote':\n                return <blockquote {...attributes}>{children}</blockquote>\n            case 'bulleted-list':\n                return <ul {...attributes}>{children}</ul>\n            case 'heading-two':\n                return <h2 {...attributes}>{children}</h2>\n            case 'list-item':\n                return <li {...attributes}>{children}</li>\n            case 'numbered-list':\n                return <ol {...attributes}>{children}</ol>\n            default:\n                return next()\n        }\n    }\n\n    const renderMark = (props, editor, next) => {\n        const { children, mark, attributes } = props\n\n        switch (mark.type) {\n            case 'bold':\n                return <strong {...attributes}>{children}</strong>\n            case 'italic':\n                return <em {...attributes}>{children}</em>\n            case 'underlined':\n                return <u {...attributes}>{children}</u>\n            default:\n                return next()\n        }\n    }\n\n    return <>\n        <RichTextOption {...{ value, editorRef, note }} />\n        <div className=\"container--info\">\n            <TextView className=\"text-view-content\">{getReadableTimeStamp(note.lastModifiedTimestamp)}</TextView>\n            <TextView className=\"text-view-content--separator\">|</TextView>\n            <TextView className=\"text-view-content\">{`${wordCount} words`}</TextView>\n        </div>\n        <Editor\n            spellCheck\n            autoFocus\n            style={{\n                height: 'calc(100% - 50px)',\n                padding: '5px',\n                boxSizing: 'border-box',\n                overflow: 'auto',\n            }}\n            placeholder=\"Enter your note...\"\n            ref={editor => editorRef.current = editor}\n            value={value}\n            onChange={({ value }) => {\n                saveNote(idb, value, note, setNote);\n                setValue(value)\n            }\n            }\n            onKeyDown={onKeyDown}\n            renderNode={renderNode}\n            renderMark={renderMark}\n        />\n    </>;\n}\n\nexport default NoteBody;\n","import workerize from 'workerize';\n\nconst worker = workerize(`\n    export function wordCount(noteId) {\n            \n        return new Promise(function (resolve, reject) {\n            \n            var openRequest = indexedDB.open('notas', 1);\n\n            var dbPromise = new Promise(function (resolve1, reject1) {\n                openRequest.onsuccess = function(e) {\n                    resolve1(e.target.result);\n                };\n            }).then(function (db) {\n                var transaction = db.transaction(['notes'], 'readonly');\n                var store = transaction.objectStore('notes');\n\n                var getRequest = store.get(noteId);\n                getRequest.onsuccess = function (e) {\n                    var note = e.target.result;\n                    var words = note.content.split(/\\\\s+/g).filter(w => w !== '');\n                    resolve(words.length);\n                }\n                getRequest.onerror = function (e) { reject(e.target.result); };\n            });\n        });\n\n    }\n`);\n\nexport default worker;","import React, { useEffect, useState, useContext, useCallback, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport doNoteAction, { GET_NOTE_BY_ID, SAVE_NOTE } from '../../actions/doNoteAction';\nimport idbContext from '../../contexts/idbContext';\n\nimport NoteHeaderToolbar from './NoteHeaderToolbar';\nimport NoteBody from './NoteBody';\nimport Spinner from '../../components/Spinner';\n\nimport { getColorFromLabel } from '../../contants/noteColors';\nimport wordCountWorker from '../../workers/wordCount';\n\n\nimport './styles.css';\n\nconst NotePage = ({ match, history }) => {\n    const { idb } = useContext(idbContext);\n\n    const [note, setNote] = useState(null);\n    const [value, setValue] = useState(null);\n    const [toolTipAnchorEl, setToolTipAnchorEl] = useState(null);\n    const [wordCount, setWordCount] = useState(0);\n\n    const iconClick = useCallback((e, tools) => {\n        e.stopPropagation();\n        setToolTipAnchorEl(e.currentTarget);\n    }, []);\n    const closeToolTip = useCallback(() => setToolTipAnchorEl(null), []);\n    const backButtonClick = useCallback(() => history.replace(`/folder/${note.folderId}`), [note && note.folderId]);\n    const doneButtonClick = useCallback(() => {\n        doNoteAction(SAVE_NOTE.operation, { idb, note, value })\n        history.replace('/');\n    }, [note, value]);\n\n    useEffect(() => {\n        const noteId = match.params.id;\n        doNoteAction(GET_NOTE_BY_ID.operation, { idb, setNote, setValue, noteId })\n    }, []);\n\n    useEffect(() => {\n        if (note) {\n            wordCountWorker.wordCount(note.id).then((countWords) => {\n                setWordCount(countWords);\n            });\n        }\n    }, [note]);\n\n    const editorRef = useRef();\n\n    if (!note) {\n        return <Spinner />;\n    }\n\n    return (\n        <div\n            className=\"container--note-page\"\n            style={{ backgroundColor: getColorFromLabel(note.color, 'value') }}\n            onClick={closeToolTip}>\n            <NoteHeaderToolbar {...{\n                anchorEl: toolTipAnchorEl,\n                iconClick,\n                backButtonClick,\n                doneButtonClick,\n                noteColor: note.color,\n                note,\n                setNote,\n                editorRef,\n            }} />\n            <div className=\"container--note-body\">\n                <NoteBody  {...{\n                    value,\n                    setValue,\n                    editorRef,\n                    note,\n                    setNote,\n                    wordCount,\n                }} />\n            </div>\n        </div>);\n};\n\nexport default withRouter(NotePage);"],"sourceRoot":""}